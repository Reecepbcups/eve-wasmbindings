{"version":3,"file":"index.umd.min.js","sources":["../src/contracts/OsmosisStargateContract.ts"],"sourcesContent":["/**\n* This file was automatically generated by cosmwasm-typescript-gen@0.3.9.\n* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,\n* and run the cosmwasm-typescript-gen generate command to regenerate this file.\n*/\n\nimport { CosmWasmClient, ExecuteResult, SigningCosmWasmClient } from \"@cosmjs/cosmwasm-stargate\";\nimport { StdFee } from \"@cosmjs/amino\";\nexport type ExecuteMsg = {\n  create_denom: {\n    initial_mint?: string | null;\n    initial_pool?: InitPoolCfg | null;\n    subdenom: string;\n    [k: string]: unknown;\n  };\n};\nexport interface InitPoolCfg {\n  exit_fee: string;\n  pairing_denom: string;\n  pool_assets: PoolAssests;\n  swap_fee: string;\n  [k: string]: unknown;\n}\nexport interface PoolAssests {\n  new_token_amount: string;\n  new_token_weight: string;\n  pairing_token_amount: string;\n  pairing_token_weight: string;\n  [k: string]: unknown;\n}\nexport interface InstantiateMsg {\n  [k: string]: unknown;\n}\nexport interface QueryCreatorDenomsResponse {\n  denoms: string[];\n  [k: string]: unknown;\n}\nexport type QueryMsg = {\n  query_token_creation_fee: {\n    [k: string]: unknown;\n  };\n} | {\n  query_creator_denoms: {\n    [k: string]: unknown;\n  };\n};\nexport type Uint128 = string;\nexport interface QueryTokenCreationFeeResponse {\n  fee: Coin[];\n  [k: string]: unknown;\n}\nexport interface Coin {\n  amount: Uint128;\n  denom: string;\n  [k: string]: unknown;\n}\nexport interface OsmosisStargateReadOnlyInterface {\n  contractAddress: string;\n  queryTokenCreationFee: () => Promise<QueryTokenCreationFeeResponse>;\n  queryCreatorDenoms: () => Promise<QueryCreatorDenomsResponse>;\n}\nexport class OsmosisStargateQueryClient implements OsmosisStargateReadOnlyInterface {\n  client: CosmWasmClient;\n  contractAddress: string;\n\n  constructor(client: CosmWasmClient, contractAddress: string) {\n    this.client = client;\n    this.contractAddress = contractAddress;\n    this.queryTokenCreationFee = this.queryTokenCreationFee.bind(this);\n    this.queryCreatorDenoms = this.queryCreatorDenoms.bind(this);\n  }\n\n  queryTokenCreationFee = async (): Promise<QueryTokenCreationFeeResponse> => {\n    return this.client.queryContractSmart(this.contractAddress, {\n      query_token_creation_fee: {}\n    });\n  };\n  queryCreatorDenoms = async (): Promise<QueryCreatorDenomsResponse> => {\n    return this.client.queryContractSmart(this.contractAddress, {\n      query_creator_denoms: {}\n    });\n  };\n}\nexport interface OsmosisStargateInterface extends OsmosisStargateReadOnlyInterface {\n  contractAddress: string;\n  sender: string;\n  createDenom: ({\n    initialMint,\n    initialPool,\n    subdenom\n  }: {\n    initialMint?: string;\n    initialPool?: InitPoolCfg;\n    subdenom: string;\n  }, fee?: number | StdFee | \"auto\", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;\n}\nexport class OsmosisStargateClient extends OsmosisStargateQueryClient implements OsmosisStargateInterface {\n  client: SigningCosmWasmClient;\n  sender: string;\n  contractAddress: string;\n\n  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {\n    super(client, contractAddress);\n    this.client = client;\n    this.sender = sender;\n    this.contractAddress = contractAddress;\n    this.createDenom = this.createDenom.bind(this);\n  }\n\n  createDenom = async ({\n    initialMint,\n    initialPool,\n    subdenom\n  }: {\n    initialMint?: string;\n    initialPool?: InitPoolCfg;\n    subdenom: string;\n  }, fee: number | StdFee | \"auto\" = \"auto\", memo?: string, funds?: readonly Coin[]): Promise<ExecuteResult> => {\n    return await this.client.execute(this.sender, this.contractAddress, {\n      create_denom: {\n        initial_mint: initialMint,\n        initial_pool: initialPool,\n        subdenom\n      }\n    }, fee, memo, funds);\n  };\n}"],"names":["OsmosisStargateQueryClient","client","contractAddress","_this","this","queryTokenCreationFee","__awaiter","queryContractSmart","query_token_creation_fee","queryCreatorDenoms","query_creator_denoms","bind","OsmosisStargateClient","_super","sender","call","createDenom","_a","fee","memo","funds","initialMint","initialPool","subdenom","execute","create_denom","initial_mint","initial_pool","_b","__extends"],"mappings":";;;;;gxDA6DA,IAAAA,EAIE,SAAYC,EAAwBC,GAApC,IAKCC,EAAAC,KAEDA,KAAAC,sBAAwB,WAAA,OAAAC,EAAAH,OAAA,OAAA,GAAA,sCACtB,MAAO,CAAA,EAAAC,KAAKH,OAAOM,mBAAmBH,KAAKF,gBAAiB,CAC1DM,yBAA0B,CAAE,YAGhCJ,KAAAK,mBAAqB,WAAA,OAAAH,EAAAH,OAAA,OAAA,GAAA,sCACnB,MAAO,CAAA,EAAAC,KAAKH,OAAOM,mBAAmBH,KAAKF,gBAAiB,CAC1DQ,qBAAsB,CAAE,YAb1BN,KAAKH,OAASA,EACdG,KAAKF,gBAAkBA,EACvBE,KAAKC,sBAAwBD,KAAKC,sBAAsBM,KAAKP,MAC7DA,KAAKK,mBAAqBL,KAAKK,mBAAmBE,KAAKP,KACxD,EA0BHQ,EAAA,SAAAC,GAKE,SAAAD,EAAYX,EAA+Ba,EAAgBZ,GAA3D,IAAAC,EACEU,EAAME,KAAAX,KAAAH,EAAQC,IAKfE,YAEDD,EAAWa,YAAG,SAAOC,EAQlBC,EAAwCC,EAAeC,GAPxD,IAAAC,gBACAC,EAAWL,EAAAK,YACXC,EAAQN,EAAAM,qBAKP,IAAAL,IAAAA,EAAsC,iFAChC,KAAA,EAAA,MAAA,CAAA,EAAMd,KAAKH,OAAOuB,QAAQpB,KAAKU,OAAQV,KAAKF,gBAAiB,CAClEuB,aAAc,CACZC,aAAcL,EACdM,aAAcL,EACdC,SAAQA,IAETL,EAAKC,EAAMC,IANd,KAAA,EAAA,MAAA,CAAA,EAAOQ,kBAfPzB,EAAKF,OAASA,EACdE,EAAKW,OAASA,EACdX,EAAKD,gBAAkBA,EACvBC,EAAKa,YAAcb,EAAKa,YAAYL,KAAKR,IAC1C,CAmBH,0PA9B2C0B,CAA0BjB,EAAAC,GA8BpED,CAAD,CA9BA,CAA2CZ"}