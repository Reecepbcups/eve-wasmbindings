{"version":3,"file":"index.js","sources":["../src/contracts/OsmosisStargateContract.ts"],"sourcesContent":["/**\n* This file was automatically generated by cosmwasm-typescript-gen@0.3.9.\n* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,\n* and run the cosmwasm-typescript-gen generate command to regenerate this file.\n*/\n\nimport { CosmWasmClient, ExecuteResult, SigningCosmWasmClient } from \"@cosmjs/cosmwasm-stargate\";\nimport { StdFee } from \"@cosmjs/amino\";\nexport type ExecuteMsg = {\n  create_denom: {\n    initial_mint?: string | null;\n    initial_pool?: InitPoolCfg | null;\n    subdenom: string;\n    [k: string]: unknown;\n  };\n};\nexport interface InitPoolCfg {\n  exit_fee: string;\n  pairing_denom: string;\n  pool_assets: PoolAssests;\n  swap_fee: string;\n  [k: string]: unknown;\n}\nexport interface PoolAssests {\n  new_token_amount: string;\n  new_token_weight: string;\n  pairing_token_amount: string;\n  pairing_token_weight: string;\n  [k: string]: unknown;\n}\nexport interface InstantiateMsg {\n  [k: string]: unknown;\n}\nexport interface QueryCreatorDenomsResponse {\n  denoms: string[];\n  [k: string]: unknown;\n}\nexport type QueryMsg = {\n  query_token_creation_fee: {\n    [k: string]: unknown;\n  };\n} | {\n  query_creator_denoms: {\n    [k: string]: unknown;\n  };\n};\nexport type Uint128 = string;\nexport interface QueryTokenCreationFeeResponse {\n  fee: Coin[];\n  [k: string]: unknown;\n}\nexport interface Coin {\n  amount: Uint128;\n  denom: string;\n  [k: string]: unknown;\n}\nexport interface OsmosisStargateReadOnlyInterface {\n  contractAddress: string;\n  queryTokenCreationFee: () => Promise<QueryTokenCreationFeeResponse>;\n  queryCreatorDenoms: () => Promise<QueryCreatorDenomsResponse>;\n}\nexport class OsmosisStargateQueryClient implements OsmosisStargateReadOnlyInterface {\n  client: CosmWasmClient;\n  contractAddress: string;\n\n  constructor(client: CosmWasmClient, contractAddress: string) {\n    this.client = client;\n    this.contractAddress = contractAddress;\n    this.queryTokenCreationFee = this.queryTokenCreationFee.bind(this);\n    this.queryCreatorDenoms = this.queryCreatorDenoms.bind(this);\n  }\n\n  queryTokenCreationFee = async (): Promise<QueryTokenCreationFeeResponse> => {\n    return this.client.queryContractSmart(this.contractAddress, {\n      query_token_creation_fee: {}\n    });\n  };\n  queryCreatorDenoms = async (): Promise<QueryCreatorDenomsResponse> => {\n    return this.client.queryContractSmart(this.contractAddress, {\n      query_creator_denoms: {}\n    });\n  };\n}\nexport interface OsmosisStargateInterface extends OsmosisStargateReadOnlyInterface {\n  contractAddress: string;\n  sender: string;\n  createDenom: ({\n    initialMint,\n    initialPool,\n    subdenom\n  }: {\n    initialMint?: string;\n    initialPool?: InitPoolCfg;\n    subdenom: string;\n  }, fee?: number | StdFee | \"auto\", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;\n}\nexport class OsmosisStargateClient extends OsmosisStargateQueryClient implements OsmosisStargateInterface {\n  client: SigningCosmWasmClient;\n  sender: string;\n  contractAddress: string;\n\n  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {\n    super(client, contractAddress);\n    this.client = client;\n    this.sender = sender;\n    this.contractAddress = contractAddress;\n    this.createDenom = this.createDenom.bind(this);\n  }\n\n  createDenom = async ({\n    initialMint,\n    initialPool,\n    subdenom\n  }: {\n    initialMint?: string;\n    initialPool?: InitPoolCfg;\n    subdenom: string;\n  }, fee: number | StdFee | \"auto\" = \"auto\", memo?: string, funds?: readonly Coin[]): Promise<ExecuteResult> => {\n    return await this.client.execute(this.sender, this.contractAddress, {\n      create_denom: {\n        initial_mint: initialMint,\n        initial_pool: initialPool,\n        subdenom\n      }\n    }, fee, memo, funds);\n  };\n}"],"names":[],"mappings":"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"}